{"version":3,"sources":["components/Filter/Filter.module.css","components/ContactList/ContactList.module.css","redux/actions.js","redux/selectors.js","components/ContactForm/ContactForm.jsx","components/Filter/Filter.jsx","components/ContactList/ContactList.jsx","App.jsx","redux/reducer.js","redux/store.js","index.js","components/ContactForm/ContactForm.module.css"],"names":["module","exports","addContact","createAction","name","number","payload","id","uuidv4","deleteContact","changeFilter","getFilter","state","contacts","filter","getItems","items","getVisibleContacts","normalizeFilter","toLowerCase","includes","ContactForm","useState","setName","setNumber","useSelector","dispatch","useDispatch","handleChange","event","currentTarget","value","resetState","className","styles","form","onSubmit","preventDefault","some","item","alert","actions","labelName","input","type","onChange","btn","disabled","Filter","label","target","ContactList","visibleContacts","map","onClick","onDeleteContact","App","createReducer","combineReducers","contactsPersistConfig","key","storage","blacklist","middleware","getDefaultMiddleware","serializableCheck","ignoredActions","FLUSH","REHYDRATE","PAUSE","PERSIST","PURGE","REGISTER","store","configureStore","reducer","persistReducer","contactsReducer","devTools","process","persistor","persistStore","ReactDOM","render","StrictMode","loading","document","querySelector"],"mappings":"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","file":"static/js/main.b03a124c.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"input\":\"Filter_input__2DoVp\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"btn\":\"ContactList_btn__1Xk4q\",\"item\":\"ContactList_item__3YsZK\"};","import { createAction } from '@reduxjs/toolkit';\nimport { v4 as uuidv4 } from 'uuid';\n\nconst addContact = createAction('phoneBook/addContact', (name, number) => {\n  return {\n    payload: {\n      id: uuidv4(),\n      name,\n      number,\n    },\n  };\n});\nconst deleteContact = createAction('phoneBook/deleteContact');\nconst changeFilter = createAction('phoneBook/filterContacts');\n\nexport default { addContact, deleteContact, changeFilter };\n","export const getFilter = state => state.contacts.filter;\nexport const getItems = state => state.contacts.items;\n\nexport const getVisibleContacts = state => {\n  const contacts = getItems(state);\n  const filter = getFilter(state);\n\n  const normalizeFilter = filter.toLowerCase();\n\n  return contacts.filter(({ name }) =>\n    name.toLowerCase().includes(normalizeFilter),\n  );\n};\n","import { useState } from 'react';\nimport { useSelector, useDispatch } from 'react-redux';\nimport actions from '../../redux/actions';\nimport { getItems } from '../../redux/selectors';\nimport PropTypes from 'prop-types';\nimport styles from './ContactForm.module.css';\n\nconst ContactForm = function () {\n  const [name, setName] = useState('');\n  const [number, setNumber] = useState('');\n\n  const items = useSelector(getItems);\n  const dispatch = useDispatch();\n\n  const onSubmit = (name, number) => dispatch(actions.addContact(name, number));\n\n  const handleChange = event => {\n    const { name, value } = event.currentTarget;\n\n    switch (name) {\n      case 'name':\n        setName(value);\n        break;\n      case 'number':\n        setNumber(value);\n        break;\n      default:\n        return;\n    }\n  };\n\n  const resetState = () => {\n    setName('');\n    setNumber('');\n  };\n\n  const handleSubmit = event => {\n    event.preventDefault();\n\n    const isAlreadyInContacts = items.some(item => item.name === name);\n\n    if (isAlreadyInContacts) {\n      resetState();\n      return alert(`${name} is already in contacts`);\n    } else {\n      resetState();\n      return onSubmit(name, number);\n    }\n  };\n\n  return (\n    <form className={styles.form} onSubmit={handleSubmit}>\n      <label className={styles.labelName}>\n        Name\n        <input\n          className={styles.input}\n          type=\"text\"\n          name=\"name\"\n          value={name}\n          onChange={handleChange}\n        />\n      </label>\n      <label>\n        Number\n        <input\n          className={styles.input}\n          type=\"text\"\n          name=\"number\"\n          value={number}\n          onChange={handleChange}\n        />\n      </label>\n\n      <button\n        className={styles.btn}\n        type=\"submit\"\n        disabled={!(name && number) && true}\n      >\n        Add contact\n      </button>\n    </form>\n  );\n};\n\nContactForm.propTypes = {\n  name: PropTypes.string,\n  number: PropTypes.string,\n};\n\nexport default ContactForm;\n","import { useSelector, useDispatch } from 'react-redux';\nimport actions from '../../redux/actions';\nimport { getFilter } from '../../redux/selectors';\n\nimport styles from './Filter.module.css';\n\nexport default function Filter() {\n  const filter = useSelector(getFilter);\n  const dispatch = useDispatch();\n  const onFilter = event => dispatch(actions.changeFilter(event.target.value));\n\n  return (\n    <label className={styles.label}>\n      Find contacts by name\n      <input\n        className={styles.input}\n        type=\"text\"\n        name=\"filter\"\n        value={filter}\n        onChange={onFilter}\n      />\n    </label>\n  );\n}\n","import PropTypes from 'prop-types';\nimport { useSelector, useDispatch } from 'react-redux';\nimport actions from '../../redux/actions';\nimport { getVisibleContacts } from '../../redux/selectors';\nimport styles from './ContactList.module.css';\n\nconst ContactList = () => {\n  const visibleContacts = useSelector(getVisibleContacts);\n  const dispatch = useDispatch();\n  const onDeleteContact = id => dispatch(actions.deleteContact(id));\n\n  return (\n    <ul>\n      {visibleContacts.map(({ id, name, number }) => (\n        <li className={styles.item} key={id}>\n          {name}: {number}\n          <button\n            className={styles.btn}\n            type=\"button\"\n            name={id}\n            onClick={() => onDeleteContact(id)}\n          >\n            Delete\n          </button>\n        </li>\n      ))}\n    </ul>\n  );\n};\n\nContactList.propTypes = {\n  visibleContacts: PropTypes.arrayOf(\n    PropTypes.shape({\n      id: PropTypes.string.isRequired,\n      name: PropTypes.string.isRequired,\n      number: PropTypes.string.isRequired,\n    }),\n  ),\n};\n\nexport default ContactList;\n","import PropTypes from 'prop-types';\nimport ContactForm from './components/ContactForm/ContactForm';\nimport Filter from './components/Filter/Filter';\nimport ContactList from './components/ContactList/ContactList';\n\nconst App = function () {\n  return (\n    <div>\n      <h1>Phonebook</h1>\n      <ContactForm />\n\n      <h2>Contacts</h2>\n      <Filter />\n      <ContactList />\n    </div>\n  );\n};\n\nApp.propTypes = {\n  contacts: PropTypes.arrayOf(\n    PropTypes.shape({\n      id: PropTypes.string.isRequired,\n      name: PropTypes.string.isRequired,\n      number: PropTypes.string.isRequired,\n    }),\n  ),\n  filter: PropTypes.string,\n};\n\nexport default App;\n","import { combineReducers } from 'redux';\nimport { createReducer } from '@reduxjs/toolkit';\nimport actions from './actions';\n\nconst items = createReducer([], {\n  [actions.addContact]: (state, { payload }) => [...state, payload],\n  [actions.deleteContact]: (state, { payload }) =>\n    state.filter(({ id }) => id !== payload),\n});\n\nconst filter = createReducer('', {\n  [actions.changeFilter]: (state, { payload }) => payload,\n});\n\nexport default combineReducers({\n  items,\n  filter,\n});\n","import { configureStore, getDefaultMiddleware } from '@reduxjs/toolkit';\nimport {\n  persistStore,\n  persistReducer,\n  FLUSH,\n  REHYDRATE,\n  PAUSE,\n  PERSIST,\n  PURGE,\n  REGISTER,\n} from 'redux-persist';\nimport storage from 'redux-persist/lib/storage';\nimport contactsReducer from './reducer';\n\nconst contactsPersistConfig = {\n  key: 'contacts',\n  storage,\n  blacklist: ['filter'],\n};\n\nconst middleware = [\n  ...getDefaultMiddleware({\n    serializableCheck: {\n      ignoredActions: [FLUSH, REHYDRATE, PAUSE, PERSIST, PURGE, REGISTER],\n    },\n  }),\n];\n\nconst store = configureStore({\n  reducer: {\n    contacts: persistReducer(contactsPersistConfig, contactsReducer),\n  },\n  middleware,\n  devTools: process.env.NODE_ENV === 'development',\n});\n\nconst persistor = persistStore(store);\n\nexport default { store, persistor };\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { Provider } from 'react-redux';\nimport { PersistGate } from 'redux-persist/es/integration/react';\nimport App from './App';\nimport store from './redux/store';\nimport './index.css';\n\nReactDOM.render(\n  <React.StrictMode>\n    <Provider store={store.store}>\n      <PersistGate loading={null} persistor={store.persistor}>\n        <App />\n      </PersistGate>\n    </Provider>\n  </React.StrictMode>,\n  document.querySelector('#root'),\n);\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"form\":\"ContactForm_form__1fuOn\",\"labelName\":\"ContactForm_labelName__3V3cS\",\"input\":\"ContactForm_input__gm87B\",\"btn\":\"ContactForm_btn__2Bpnz\"};"],"sourceRoot":""}